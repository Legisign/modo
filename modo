#!/usr/bin/zsh
#
# modo -- compile and install Gettext localization files
#
# 2021-10-01    -v, --verbose switches.

emulate -L zsh

declare modotemp dest tdestfile pofile tsfile
declare -a convopts dest1 destfiles instopts pofiles usage verbose

zparseopts -E -D h=usage -help=usage d:=dest1 -destination:=dest1 v:=verbose -verbose:=verbose

if [[ -n $usage ]]; then
    <<EOF
${0:t} -- compile and install Gettext localization files

Usage
    ${0:t} [ options ] pofile...

    Compiles and installs each pofile. The target directory can be set with
    -d, --destination command line option or in a modo.def file in the current
    directory. The contents of the file is just the directory path.

    Unless explicitly given, the script tries to guess the target:

    -   on Ubuntu: /usr/share/locale-langpack/LANGCODE/messages
    -   on other distros: /usr/share/locale/LANGCODE/messages

    LANGCODE is taken from \$LANG by discarding the country code and encoding
    (default now: "${LANG%%_*}").

Options
    -d DIR, --destination=DIR   set target directory
    -v, --verbose               show the operations
    --help                      show this help and quit

EOF
    exit 0
fi

# Constants
convopts=(-target-language fi)
modotemp=/tmp/$(whoami)
instopts=(--backup=numbered -o root -g root -m 444)

# msgfmt required
if [[ -z $(whence msgfmt) ]]; then
    print -- ${0:t}: VIRHE: asenna ensin gettext 1>&2
    exit 1
fi

# Target directory explicitly given on the command line
if (( $#dest1 > 0 )); then
    dest=${dest1[-1]##=}
# If not given, try and read `modo.def`, if readable
elif [[ -r modo.def ]]; then
    dest=$(<modo.def)
elif lsb_release -sd >& /dev/null | grep -iq ubuntu; then
    dest=/usr/share/locale-langpack/${LANG%%_*}/LC_MESSAGES
else
    dest=/usr/share/locale/${LANG%%_*}/LC_MESSAGES
fi
[[ -n $verbose ]] && print -- ${0:t}: Kohdekansio: "$dest"

# Make sure the target directory exists
if [[ ! -d $dest ]]; then
    [[ -n $verbose ]] && print -- ${0:t}: yritetään luoda kohdekansio
    if ! sudo mkdir -p $dest; then
        print -- ${0:t}: kansiota "$dest" ei voitu luoda 1>&2
        exit 2
    fi
    sudo chmod -R 755 $dest
fi

# Collect source files
if (( $# > 0 )); then
    pofiles=($@)
else
    for pofile in *.po(.N); do
        mofile=$dest/${pofile:t:r}.mo
        [[ ! -f $mofile || $pofile -nt $mofile ]] && pofiles=($pofiles $pofile)
    done
fi
(( $#pofiles > 0 )) || { print -- ${0:t}: ei lähdetiedostoja 1>&2; exit 0 }

# Set temp directory
if [[ ! -d $modotemp ]]; then
    if ! mkdir $modotemp > /dev/null 2>&1; then
        print -- ${0:t}: väliaikaiskansiota "$modotemp" ei voitu luoda 1>&2
        exit 3
    fi
# Remove left-over `.mo` files
elif ls -1 $modotemp | grep -q "\.mo\$"; then
    rm $modotemp/*.mo
fi

# Compile source files
destfiles=()
for pofile in $pofiles; do
    # *_qt.po files need to be compiled to *.qm
    if [[ $pofile == *_qt.po ]]; then
        tsfile=$modotemp/${pofile:t:r}.ts
        mofile=$modotemp/${pofile:t:r}.qm
        [[ -n $verbose ]] && print -- ${0:t}: Tehdään välitiedosto ${tsfile:t}...
        lconvert $convopts -i $pofile -o $tsfile
        if (( $? == 0 )); then
            [[ -n $verbose ]] && print -- ${0:t}: Käännetään ${tsfile:t}...
            lrelease $tsfile -qm $mofile > /dev/null 2>&1 && destfiles+=($mofile)
        else
            print -- ${0:t}: muunnos TS-tiedostoksi epäonnistui 1>&2
            continue
        fi
    # Ordinary *.po files
    elif [[ $pofile == *.po ]]; then
        mofile=$modotemp/${pofile:t:r}.mo
        [[ -n $verbose ]] && print -- ${0:t}: Käännetään ${pofile:t}...
        msgfmt -o $mofile $pofile && destfiles+=($mofile)
    # Not a *.po file
    else
        [[ -n $verbose ]] && print -- ${0:t}: ohitetaan "$pofile"
    fi
done

# Install target files
if (( $#destfiles > 0 )); then
    for mofile in $destfiles; do
        [[ -n $verbose ]] && print -- ${0:t}: Kopioidaan $mofile -\> $dest...
        sudo install $instopts $mofile $dest && rm $mofile
    done
elif [[ -n $verbose ]]; then
    print -- ${0:t}: ei mitään asennettavaa
fi
